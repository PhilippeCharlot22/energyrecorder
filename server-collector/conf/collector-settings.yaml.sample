# The following list give you the different possibilities to gather power consuption on servers
# see "type" field:
#	ilo: for Gen9 HP server using OEM API (prefer redfish is supported)
#	ilo-gui: for Gen8 HP Server, web gui scrapping (prefer redfish is supported)
#	redfish: for server support Redfish REST API
#	ipmi: using impitool. See "grammar" dicionary in ipmicolector.py for supported manufacturer
# idrac8-gui: for DELL iDrac V8 iBMC, web gui scrapping (prefer redfish is supported)
# intel-gui: for Intel servers, web gui scrapping (prefer redfish is supported)
# ibmc-gui: for Huawei servers, web gui scrapping (prefer redfish is supported)
PODS:
- environment: YOUR-SERVER-GROUP-NAME
  # polling internval in seconds
  polling_interval: 10
  # Following parameter is optional (default is True)
  #active: False|True 
  servers:
  # HP ILO Server (Gen9)
  - host: server-ip-or-name[:port]
  # At your choice
    id: server-id
    type: ilo
    user: ilo-user
    pass: ilo-user-password
    # Following parameter is optional (default is True)
    # active: False|True 

  # HP ILO Server (GUI Hacking, Gen8))
  - host: server-ip-or-name[:port]
  # At your choice
    id: server-id
    type: ilo-gui
    user: ilo-user
    pass: ilo-user-password
    # Following parameter is optional (default is True)
    # active: False|True 

  # DELL IDRAC8 Server (GUI Hacking))
  - host: server-ip-or-name[:port]
  # At your choice
    id: server-id
    type: idrac8-gui
    user: idrac-user
    pass: idrac-user-password
    # Following parameter is optional (default is True)
    # active: False|True 

  # INTEL Server (GUI Hacking))
  - host: server-ip-or-name[:port]
  # At your choice
    id: server-id
    type: intel-gui
    user: web-console-user
    pass: web-console-user-password
    # Following parameter is optional (default is True)
    # active: False|True 

  # HUAWEI iBMC  Server (GUI Hacking))
  - host: server-ip-or-name[:port]
  # At your choice
    id: server-id
    type: ibmc-gui
    user: web-console-user
    pass: web-console-user-password
    # Following parameter is optional (default is True)
    # active: False|True 

  #redfish server
  - host: server-ip-or-name[:port]
  # At your choice
    id: server-id
    type: redfish
    user: redfish-user
    pass: redfish-user-password
    # Following parameter is optional (default is True)
    # active: False|True 

    #Generic IPMI (see ipmicollector.py to see supported hardware)
  - host: server-ip-or-name[:bidged-address] # ex 192.168.0.1 or if bidging required 192.168.0.1:0x82
  # At your choice
    id: server-id
    type: ipmi
    user: ipmi-user
    pass: ipmi-user-password
    # Following parameter is optional (default is True)
    # active: False|True 


# Assume that collected CSV files have the following structure:
#   1st column: datetime of measurement with format:
#       YYYY/MM/DD HH:MI:SS.ssss
#   2nd column: TIMEZONE for measurement datetime with format
#       HHMI offset from UTC Ex. +0200, -0500
#       or
#       +HH:MI offset from UTC Ex. +02:00, -05:00
#       or
#       Z for UTC
#       or
#       Valid full timezone name ex Europe/Paris
#       or
#       With any other value, will use host TZ
#   1st line: Sensors name and unit in format:
#       sensor name (Unit)
#       Ex: "Timestamp","TZ","U_bat_1 (V)","I_load_1 (A)","I_bat_1 (A)"
#   Following lines: data as float or integer
#       Ex: 2017/07/17 09:04:00.000,n,56.370628,0.106086,22.658
  - host: 127.0.0.1
    id: server-id
    type: csvftp
    user: user
    pass: path
    root_dir: /data/dir/on/server
    active: True
    # optional parameters
    # default file_filter: *
    file_filter: "*.CSV"
    # default encoding: utf8
    encoding: "utf8"
    # default purge: False remove file from FTP server when data are send
    purge: True
    # Optional, overide TZ for CSV (or host TZ if no TZ in CSV) with a 
    # specific TZ  Ex:. Europe/Paris
    tz: Europe/Paris

  - host: server-ip-or-name[:port]
    id: server-id
    type: modbus
    sensors:
      - name: power
        unit: W
        register_address: reg-number
        # Data type stored in register
        # MBI: signed 16b integer (ModBus Integer)
        # MBU: unsigned 16b integer (ModBus Unsigned)
        # MBL: signed 32 integer (ModBus Long) require register_order: right for datataker
        # MBF: 32b float, (ModBux Float) require register_order: left for datataker
        register_type: MBI
        # 16b WORDs order for MBL and MBF
        # lowest weight WORD at right (default)
        #register_order: right
        # lowest weight WORD at left
        #register_order: left
    active: True
    # Collect data dataged as dynamic
    # from rpimonitor https://github.com/XavierBerger/RPi-Monitor 
  - host: server-ip-or-name[:port]
    id: server-id
    type: rpimon
    active: False

RECORDER_API_SERVER:
  base_url: http://energy.opnfv.fr
  pass: ''
  user: ''
  # Uncomment following line to bypass SSL certifcate check (NOT RECOMMANDED)
  #verify_cert: True

